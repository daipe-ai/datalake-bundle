parameters:
  datalakebundle:
    notebook:
      display:
        enabled: True
      duplicate_columns_check:
        enabled: True
    table:
      name_template: '%kernel.environment%_{identifier}'
      read:
        name_template: '%datalakebundle.table.name_template%'
      write:
        name_template: '%datalakebundle.table.name_template%'
      defaults:
    tables:

services:
  datalakebundle.delta.DeltaStorage:

  datalakebundle.logger: "@daipecore.logger"

  datalakebundle.notebook.decorator.DuplicateColumnsChecker:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.notebook.lineage.argument.ArgumentMapping:
    tags:
      - 'lineage.decorator.function.argument_mapping'

  datalakebundle.notebook.lineage.TableWriterParser.overwrite:
    class: datalakebundle.notebook.lineage.TableWriterParser
    arguments:
      - 'table_overwrite'
      - 'overwrite'
    tags:
      - 'lineage.decorator.parser'

  datalakebundle.notebook.lineage.TableWriterParser.append:
    class: datalakebundle.notebook.lineage.TableWriterParser
    arguments:
      - 'table_append'
      - 'append'
    tags:
      - 'lineage.decorator.parser'

  datalakebundle.notebook.lineage.TableWriterParser.upsert:
    class: datalakebundle.notebook.lineage.TableWriterParser
    arguments:
      - 'table_upsert'
      - 'upsert'
    tags:
      - 'lineage.decorator.parser'

  datalakebundle.notebook.lineage.data_frame_loader:
    class: daipecore.lineage.InputDecoratorParser
    arguments:
      - 'data_frame_loader'
      - 'daipecore.lineage.InputDecorator'
      - 'InputDecorator'
    tags:
      - 'lineage.decorator.parser'

  datalakebundle.notebook.lineage.data_frame_saver:
    class: daipecore.lineage.InputDecoratorParser
    arguments:
      - 'data_frame_saver'
      - 'daipecore.lineage.InputDecorator'
      - 'InputDecorator'
    tags:
      - 'lineage.decorator.parser'

  datalakebundle.notebook.lineage.transformation:
    class: daipecore.lineage.InputDecoratorParser
    arguments:
      - 'transformation'
      - 'daipecore.lineage.InputDecorator'
      - 'InputDecorator'
    tags:
      - 'lineage.decorator.parser'

  datalakebundle.table.parameters.TableParametersParser:

  datalakebundle.table.parameters.TableParametersManager:
    arguments:
      - '%datalakebundle.tables%'
      - '%datalakebundle.table.defaults%'

  datalakebundle.table.create.TableDefinitionFactory:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.create.TableCreator:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.create.TableCreatorCommand:
    arguments:
      - '@datalakebundle.logger'
    tags:
      - 'console.command'

  datalakebundle.table.create.TableRecreator:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.create.TableRecreatorCommand:
    arguments:
      - '@datalakebundle.logger'
      - '@pysparkbundle.filesystem'
    tags:
      - 'console.command'

  datalakebundle.table.delete.TableDeleter:
    arguments:
      - '@datalakebundle.logger'
      - '@pysparkbundle.filesystem'

  datalakebundle.table.delete.TableDeleterCommand:
    arguments:
      - '@datalakebundle.logger'
    tags:
      - 'console.command'

  datalakebundle.table.name.TableNamesParser:

  datalakebundle.table.name.TableNamesPreparer:

  datalakebundle.table.name.TableNameTemplateGetter:
    arguments:
      - '%datalakebundle.table.read.name_template%'
      - '%datalakebundle.table.write.name_template%'

  datalakebundle.table.optimize.TableOptimizerCommand:
    arguments:
      - '@datalakebundle.logger'
    tags:
      - 'console.command'

  datalakebundle.table.schema.DiffGenerator:

  datalakebundle.table.schema.SchemaChecker:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.schema.MetadataChecker:
    arguments:
      - ['Type', 'delta.minReaderVersion', 'delta.minWriterVersion']
      - '@datalakebundle.logger'

  datalakebundle.table.schema.TableSchemaGenerator:

  datalakebundle.table.TableExistenceChecker:

  datalakebundle.table.write.DataWriter:

  datalakebundle.table.write.TableAppender:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.write.TableOverwriter:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.write.TableUpserter:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.write.TablePropertiesSetter:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.upsert.UpsertQueryCreator:

  datalakebundle.table.identifier.IdentifierParser:
