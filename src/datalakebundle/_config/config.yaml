parameters:
  datalakebundle:
    notebook:
      display:
        enabled: True
      duplicate_columns_check:
        enabled: True
    table:
      name_template: '%kernel.environment%_{identifier}'
      defaults:
    tables:

services:
  datalakebundle.delta.DeltaStorage:

  datalakebundle.logger: "@daipecore.logger"

  datalakebundle.notebook.decorator.DuplicateColumnsChecker:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.parameters.TableParametersParser:

  datalakebundle.table.parameters.TableParametersManager:
    arguments:
      - '%datalakebundle.tables%'
      - '%datalakebundle.table.defaults%'

  datalakebundle.table.create.TableDefinitionFactory:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.create.TableCreator:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.create.TableCreatorCommand:
    arguments:
      - '@datalakebundle.logger'
    tags:
      - 'console.command'

  datalakebundle.table.create.TableRecreator:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.create.TableRecreatorCommand:
    arguments:
      - '@datalakebundle.logger'
      - '@pysparkbundle.filesystem'
    tags:
      - 'console.command'

  datalakebundle.table.delete.TableDeleter:
    arguments:
      - '@datalakebundle.logger'
      - '@pysparkbundle.filesystem'

  datalakebundle.table.delete.TableDeleterCommand:
    arguments:
      - '@datalakebundle.logger'
    tags:
      - 'console.command'

  datalakebundle.table.name.TableNamesParser:
    arguments:
      - '%datalakebundle.table.name_template%'

  datalakebundle.table.name.TableNamesPreparer:

  datalakebundle.table.optimize.TableOptimizerCommand:
    arguments:
      - '@datalakebundle.logger'
    tags:
      - 'console.command'

  datalakebundle.table.schema.SchemaChecker:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.schema.TableSchemaGenerator:

  datalakebundle.table.TableExistenceChecker:

  datalakebundle.table.TableManager:

  datalakebundle.table.write.DataWriter:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.write.TableAppender:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.write.TableOverwriter:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.write.TableUpserter:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.write.TablePropertiesSetter:
    arguments:
      - '@datalakebundle.logger'

  datalakebundle.table.upsert.UpsertQueryCreator:

  datalakebundle.table.identifier.IdentifierParser:
